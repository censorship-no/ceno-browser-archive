stages:
  - build-image
  - build

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_BUILDKIT: 1

build-image:
  stage: build-image
  only:
    changes:
      - gecko-dev/build/
      - ouinet/
      - Dockerfile
  tags:
    - shell
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE:bootstrap .
    - docker push $CI_REGISTRY_IMAGE:bootstrap
    - >
      docker build
      --build-arg USER_UID=$(id -u) --build-arg USER_GID=$(id -g)
      -t $CI_REGISTRY_IMAGE:bootstrap-$USER - < Dockerfile.user
    - docker push $CI_REGISTRY_IMAGE:bootstrap-$USER

build:
  stage: build
  tags:
    - shell
  # Please note that running an APK built with the default `ouinet.xml` configuration
  # is quite pointless, but it may help you check that the build succeeds.
  script:
    - mkdir -p root.build/.cache/ root.build/.ccache/
    - echo "$CENO_DEBUG_KEYSTORE" | base64 -d - > debug.keystore
    - if [ "$OUINET_VALUES_XML" ]; then cp "$OUINET_VALUES_XML" ouinet.xml && export OUINET_VALUES_XML=ouinet.xml; fi
    - mkdir fennec && touch fennec/.finished-bootstrap
    - >
      docker run
      --rm --user $(id -u):$(id -g)
      --device /dev/fuse --cap-add SYS_ADMIN
      --mount type=bind,source="$(pwd)",target=/usr/local/src/ouifennec
      --mount type=bind,source="$(pwd)/root.build/.cache",target=/mnt/home/.cache
      --mount type=bind,source="$(pwd)/root.build/.ccache",target=/mnt/home/.ccache
      --env OUINET_VALUES_XML
      $CI_REGISTRY_IMAGE:bootstrap-$USER
      ./build.sh
  artifacts:
    paths:
      - "*.aar"
      - "*.apk"
    expire_in: 6h
  cache:
    key: single
    paths:
      - root.build/
